<?php

/**
 * @file
 * Provides product bundles for Drupal Commerce
 */

/**
 * Retuns an array of bundle line item types
 */
function commerce_bundle_line_item_types() {
/** @todo: return bundle line item types, @see commerce_product_line_item_types() ***/
  return array();
}

/**
 * Implements hook_commerce_bundle_item_can_delete().
 */
function commerce_bundle_commerce_bundle_item_can_delete($entity) {
/** @todo: build query per bundle item reference on new line item type ****/
return TRUE;

  // Use EntityFieldQuery to look for line items referencing this bundle item
  // and do not allow the delete to occur if one exists.
  $query = new EntityFieldQuery();

  $query
    ->addTag('commerce_bundle_commerce_bundle_item_can_delete')
    ->entityCondition('entity_type', 'commerce_line_item', '=')
    ->entityCondition('bundle', commerce_bundle_line_item_types(), 'IN')
    ->fieldCondition('commerce_bundle_item', 'target_id', $entity->item_id, '=')
    ->count();

  return $query->execute() == 0;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_bundle_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['product_bundle'] = array(
    'type' => 'product_bundle',
    'name' => t('Product Bundle'),
    'description' => t('References a Product Bundle.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add bundle'),
    'base' => 'commerce_product_line_item',
    'callbacks' => array(
      'title' => 'commerce_bundle_line_item_title',
    ),
  );

  return $line_item_types;
}

/**
 * Returns a title of the bundle line item for use in Views.
 *
 * @param $line_item
 *   The bundle line item object whose title should be returned.
 *
 * @return
 *  The appropriate title depending on if the line item is a control row or not.
 */
function commerce_bundle_line_item_title($line_item) {
  dpm($line_item);
}

/**
 * Implements hook_views_post_execute().
 */
function commerce_bundle_views_post_execute(&$view) {
  if ($view->name == 'commerce_cart_form') {

    // First we need to get the alias for line item id.
    foreach ($view->query->field_aliases as $field_array) {
      if (array_key_exists('line_item_id', $field_array)) {
        $alias = $field_array['line_item_id'];
        break;
      }
    }

    if (is_array($view->result) && !empty($view->result)) {
      // Extract the entities for each result.
      foreach ($view->result as $row_index => $current_row) {
        $current_entity = $current_row->_field_data[$alias]['entity'];
        if ($current_entity->type != 'product_bundle') {
          // We don't care about anything but bundle line items.
          continue;
        }
        $previous_entity = (isset($view->result[$row_index - 1])) ? $view->result[$row_index - 1]->_field_data[$alias]['entity'] : FALSE;

        if (!$previous_entity || $previous_entity->type != 'product_bundle' || $previous_entity->commerce_bundle_id != $current_entity->commerce_bundle_id) {
          // It's  a first bundle line item in the group. Add a control row above the current row.
          $new_row = new stdClass();
          $new_row->_field_data[$alias]['entity_type'] = 'bundle_control';
          $new_row->_field_data[$alias]['entity'] = new stdClass();
          $new_row->_field_data[$alias]['entity']->type = 'product_bundle';
          $new_row->_field_data[$alias]['entity']->commerce_bundle_id = $current_entity->commerce_bundle_id;
          array_splice($view->result, $row_index, 0, array($new_row));
        }
      }
    }
  }
}
