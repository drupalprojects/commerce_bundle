<?php
/**
 * @file
 * Install, update and uninstall functions for the Commerce Bundle module.
 */

/**
 * Implements hook_field_schema().
 */
function commerce_bundle_field_schema($field) {
  $columns = array(
    'line_item_type' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
  );
  $indexes = array(
    'line_item_type' => array('line_item_type'),
  );
  $foreign_keys = array(
    'line_item_type' => array(
      'table' => 'commerce_line_item',
      'columns' => array('line_item_type' => 'type'),
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
    'foreign keys' => $foreign_keys,
  );
}

/**
 * Field base configuration for all entities.
 */
function commerce_bundle_field_configuration() {
  $fields = array();

  // Field commerce_bundle_id configuration.
  $fields['commerce_bundle_id'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_id',
    'foreign keys' => array(
      'node' => array(
        'columns' => array(
          'target_id' => 'nid',
        ),
        'table' => 'node',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'node',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Field commerce_bundle_item_id configuration.
  $fields['commerce_bundle_item_id'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_item_id',
    'foreign keys' => array(
      'commerce_bundle_item' => array(
        'columns' => array(
          'target_id' => 'item_id',
        ),
        'table' => 'commerce_bundle_item',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 1,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'commerce_bundle_item',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Field commerce_bundle_items configuration.
  $fields['commerce_bundle_items'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_items',
    'foreign keys' => array(
      'commerce_bundle_item' => array(
        'columns' => array(
          'target_id' => 'item_id',
        ),
        'table' => 'commerce_bundle_item',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'commerce_bundle_item',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Field commerce_bundle_unit_quantity configuration.
  $fields['commerce_bundle_unit_quantity'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_unit_quantity',
    'foreign keys' => array(),
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'number_integer',
  );

  // Field commerce_bundle_group_id configuration.
  $fields['commerce_bundle_group_id'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_group_id',
    'foreign keys' => array(
      'commerce_product' => array(
        'columns' => array(
          'target_id' => 'product_id',
        ),
        'table' => 'commerce_product',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'commerce_product',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Field 'commerce_bundle_config_id' configuration.
  $fields['commerce_bundle_config_id'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_config_id',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 1,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  // Field 'commerce_bundle_group_price' configuration.
  $fields['commerce_bundle_group_price'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_bundle_group_price',
    'foreign keys' => array(),
    'indexes' => array(
      'currency_price' => array(
        0 => 'amount',
        1 => 'currency_code',
      ),
    ),
    'locked' => 0,
    'module' => 'commerce_price',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'commerce_price',
  );

  // Field commerce_bundle_line_item_type configuration.
  $fields['commerce_bundle_line_item_type'] = array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'commerce_bundle_line_item_type',
    'type' => 'line_item_type',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );

  return $fields;
}

/**
 * Field instance configuration for line item types provisioned for use with
 * bundles.
 */
function commerce_bundle_line_item_field_instance_configuration() {
  // We do not specify a bundle in any of these because this is configurable.
  $instances = array();

  // Field commerce_bundle_id instance on Product Bundle Line Item.
  $instances['commerce_bundle_id'] = array(
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'The bundle display node ID.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 5,
      ),
    ),
    'entity_type' => 'commerce_line_item',
    'field_name' => 'commerce_bundle_id',
    'label' => 'Bundle ID',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 3,
    ),
  );

  // Field commerce_bundle_item_id instance on Product Bundle Line Item.
  $instances['commerce_bundle_item_id'] = array(
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'The bundle item entity ID.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 6,
      ),
    ),
    'entity_type' => 'commerce_line_item',
    'field_name' => 'commerce_bundle_item_id',
    'label' => 'Bundle Item ID',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 4,
    ),
  );

  // Field commerce_bundle_unit_quantity instance on Bundle Product Line Item
  // Type.
  $instances['commerce_bundle_unit_quantity'] = array(
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => ' ',
        ),
        'type' => 'number_integer',
        'weight' => 4,
      ),
    ),
    'entity_type' => 'commerce_line_item',
    'field_name' => 'commerce_bundle_unit_quantity',
    'label' => 'Unit Quantity',
    'required' => 1,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 2,
    ),
  );

  // Field commerce_bundle_group_id instance on Product Bundle Line Item.
  $instances['commerce_bundle_group_id'] = array(
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'The bundle group product ID.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 6,
      ),
    ),
    'entity_type' => 'commerce_line_item',
    'field_name' => 'commerce_bundle_group_id',
    'label' => 'Bundle Group ID',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 4,
    ),
  );

  // Field 'commerce_bundle_config_id' instance on Bundle Product LI type.
  $instances['commerce_bundle_config_id'] = array(
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 9,
      ),
    ),
    'entity_type' => 'commerce_line_item',
    'field_name' => 'commerce_bundle_config_id',
    'label' => 'Bundle Configuration ID',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 5,
    ),
  );

  return $instances;
}

/**
 * Field config and instance definitions.
 *
 * @return array
 *   The fields and their instances, keyed by field name, this module creates.
 */
function commerce_bundle_product_field_instance_configuration() {

  // Field commerce_bundle_items instance on Bundle Group product type.
  $instances['commerce_bundle_items'] = array(
    'bundle' => 'commerce_bundle_group',
    'commerce_cart_settings' => array(
      'attribute_field' => 0,
      'attribute_widget' => 'select',
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'hidden',
        'weight' => 5,
      ),
      'line_item' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'node_teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'commerce_product',
    'field_name' => 'commerce_bundle_items',
    'label' => 'Bundle Items',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'inline_entity_form',
      'settings' => array(
        'fields' => array(),
        'type_settings' => array(
          'allow_existing' => FALSE,
          'delete_references' => 0,
          'match_operator' => 'CONTAINS',
        ),
      ),
      'type' => 'inline_entity_form',
      'weight' => 12,
    ),
  );

  // Field commerce_bundle_unit_quantity instance on Bundle Group Product Type.
  $instances['commerce_bundle_unit_quantity'] = array(
    'bundle' => 'commerce_bundle_group',
    'commerce_cart_settings' => array(
      'field_access' => 0,
    ),
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => ' ',
        ),
        'type' => 'hidden',
        'weight' => 4,
      ),
    ),
    'entity_type' => 'commerce_product',
    'field_name' => 'commerce_bundle_unit_quantity',
    'label' => 'Unit Quantity',
    'required' => 1,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 11,
    ),
  );

  // Field commerce_bundle_group_price instance on Bundle Group Product Type.
  $instances['commerce_bundle_group_price'] = array(
    'bundle' => 'commerce_bundle_group',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => NULL,
        'settings' => array(),
        'type' => 'commerce_price_default',
        'weight' => 6,
      ),
      'line_item' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'node_teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'commerce_product',
    'field_name' => 'commerce_bundle_group_price',
    'label' => 'Group Price',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'commerce_price',
      'settings' => array(
        'currency_code' => 'default',
      ),
      'type' => 'commerce_price_full',
      'weight' => 10,
    ),
  );

  // Field commerce_bundle_line_item_type instance on bundle group product type.
  $instances['commerce_bundle_line_item_type'] = array(
    'label' => 'Line item type',
    'widget' => array(
      'weight' => '36',
      'type' => 'line_item_type_select',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'line_item_type_default',
        'settings' => array(),
        'weight' => 7,
      ),
      'line_item' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
      'node_teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => '',
    'default_value' => array(
      0 => array(
        'line_item_type' => 'commerce_bundle_line_item',
      ),
    ),
    'field_name' => 'commerce_bundle_line_item_type',
    'entity_type' => 'commerce_product',
    'bundle' => 'commerce_bundle_group',
  );

  return $instances;
}

/**
 * Implements hook_install().
 */
function commerce_bundle_install() {

  // Create the bundle group product type.
  $product_type = commerce_product_ui_product_type_new();

  $product_type['type'] = 'commerce_bundle_group';
  $product_type['name'] = t('Bundle Group');
  $product_type['description'] = t('A group of related products e.g. t-shirt with attributes of color, and size.');
  $product_type['is_new'] = TRUE;

  commerce_product_ui_product_type_save($product_type, FALSE);

  // Write field base configuration.
  foreach (commerce_bundle_field_configuration() as $field) {
    // Save field base as long as it does not exist.
    $check = field_info_field($field['field_name']);
    if (empty($check)) {
      field_create_field($field);
    }
  }

  // Write bundle group product instances.
  foreach (commerce_bundle_product_field_instance_configuration() as $instance) {
    _commerce_bundle_insert_instance($instance);
  }

  // Write bundle line item instances.
  commerce_bundle_install_line_item_field_instances();
}

/**
 * Install line item field instances for line items of a given type.
 *
 * @param $line_item_types
 */
function commerce_bundle_install_line_item_field_instances() {
  $line_item_types = commerce_bundle_line_item_types();
  $instances = commerce_bundle_line_item_field_instance_configuration();

  foreach ($line_item_types as $line_item_type) {
    foreach($instances as $instance) {
      $instance['bundle'] = $line_item_type;
      _commerce_bundle_insert_instance($instance);
    }
  }
}

/**
 * Safely insert a new field instance.
 *
 * @param $instance
 */
function _commerce_bundle_insert_instance($instance) {
  $check = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  if (empty($check)) {
    field_create_instance($instance);
  }
}


/**
 * Implements hook_uninstall().
 */
function commerce_bundle_uninstall() {
  // Delete field instances attached to commerce entity types this module
  // creates.
  module_load_include('module', 'commerce');
  commerce_delete_instances('commerce_line_item', 'commerce_bundle_line_item');
  commerce_delete_instances('commerce_product', 'commerce_bundle_group');

  $fields = commerce_bundle_installed_fields();
  foreach ($fields['field_instance'] as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    field_delete_instance($instance);
  }
  commerce_product_ui_product_type_delete('commerce_bundle_group');
}

/**
 * Update bundle item reference fields.
 */
function commerce_bundle_update_7100() {
  commerce_bundle_install_fields();

  // Lock line item field.
  if ($field = field_info_field('commerce_bundle_item_id')) {
    $field['locked'] = 1;
    $field['cardinality'] = 1;
    field_update_field($field);
  }

  // Remove instance on product group.
  if ($old_instance = field_info_instance('commerce_product', 'commerce_bundle_item_id', 'commerce_bundle_group')) {
    field_delete_instance($old_instance);
  }

  field_cache_clear();
}

/**
 * Add line item type field to bundle group products
 */
function commerce_bundle_update_7101() {
  $check_instance = field_info_instance('commerce_product', 'commerce_bundle_line_item_type', 'commerce_bundle_group');
  if (empty($check_instance)) {
    $instances = commerce_bundle_product_field_instance_configuration();

    field_create_instance($instances['commerce_bundle_line_item_type']);
  }
  else {
    throw new DrupalUpdateException('Unable to add commerce_bundle_line_item_type field to bundle group product type.');
  }
}
